{
  "name": "remark-lint-heading-word-length",
  "version": "2.0.0",
  "description": "remark-lint rule to warn when headings have too many or too few words",
  "keywords": [
    "remark",
    "remark-plugin",
    "plugin",
    "markdown",
    "remark-lint",
    "lint",
    "rule",
    "remark-lint-rule",
    "heading",
    "length",
    "bound",
    "maximum",
    "minimum",
    "word"
  ],
  "homepage": "https://github.com/Xunnamius/unified-utils/blob/main/packages/remark-lint-heading-word-length",
  "repository": {
    "type": "git",
    "url": "https://github.com/Xunnamius/unified-utils"
  },
  "license": "MIT",
  "author": "Xunnamius",
  "sideEffects": false,
  "type": "commonjs",
  "exports": {
    ".": {
      "types": "./dist/src/index.d.ts",
      "node": "./dist/src/index.mjs",
      "default": "./dist/src/index.mjs"
    },
    "./package": "./package.json",
    "./package.json": "./package.json"
  },
  "typesVersions": {
    "*": {
      "*": [
        "./dist/src/index.d.ts"
      ]
    }
  },
  "project": {
    "documentation": {
      "entry": "./src/*"
    }
  },
  "files": [
    "/dist",
    "/LICENSE",
    "/package.json",
    "/README.md"
  ],
  "scripts": {
    "build": "npm run build:dist --",
    "build:changelog": "conventional-changelog --outfile CHANGELOG.md --config ../../conventional.config.js --release-count 0 --skip-unstable && (if [ \"$CHANGELOG_SKIP_TITLE\" != 'true' ]; then { node -e 'console.log(require(\"../../conventional.config.js\").changelogTitle)'; cat CHANGELOG.md; } > CHANGELOG.md.ignore && mv CHANGELOG.md.ignore CHANGELOG.md; fi) && NODE_ENV=format remark --output --frail CHANGELOG.md && prettier --write CHANGELOG.md",
    "build:dist": "echo '> Generating types...' && NODE_ENV=production tsc --project tsconfig.types.json --incremental false && tsconfig-replace-paths --project tsconfig.types.json && echo '> Building distributables...' && NODE_ENV=production-esm babel src --extensions .ts --out-dir dist/src --out-file-extension .mjs --root-mode upward && echo '> Organizing types...' && cp --recursive --link --force --target-directory=dist dist/$(realpath --relative-base=../.. .)/* && rm --recursive --force dist/$(realpath --relative-base=../.. ..) && echo '> Refactoring types...' && NODE_ENV=production-types npx babel dist --extensions .ts --only '**/*.d.ts' --out-dir dist --keep-file-extension --root-mode upward",
    "build:docs": "if [ -r ./next.config.js ]; then typedoc --plugin typedoc-plugin-markdown --cleanOutputDir --tsconfig tsconfig.docs.json --out docs --readme none lib src test types external-scripts --exclude '**/*.test.*' --exclude external-scripts/bin; else ENTRY=`node -e 'const entry = require(\"./package.json\").project?.documentation?.entry; if(!entry) throw new Error(\"\\\"project.documentation.entry\\\" field is not defined in package.json\"); console.log(entry)'` && echo 'Entry file:' \"$ENTRY\" && typedoc --plugin typedoc-plugin-markdown --cleanOutputDir --tsconfig tsconfig.docs.json --out docs --readme none $(echo $ENTRY); fi",
    "clean": "git ls-files --exclude-standard --ignored --others --directory | grep -vE '^((\\.(env|vscode|husky))|next-env\\.d\\.ts|node_modules)($|\\/)' | xargs -p rm -rf",
    "format": "cd ../.. && npm run format",
    "lint": "echo 'IMPLEMENT ME'",
    "list-tasks": "node -e 'console.log(Object.keys(require(\"./package.json\").scripts).join(\"\\n\"))'",
    "test": "npm run test:unit --",
    "test:integration": "echo 'IMPLEMENT ME'",
    "test:unit": "echo 'IMPLEMENT ME'"
  },
  "dependencies": {
    "mdast-util-to-string": "^4.0.0",
    "unified-lint-rule": "^3.0.1",
    "unist-util-generated": "^3.0.0",
    "unist-util-visit": "^5.0.0"
  },
  "engines": {
    "node": "^18.16.0 || >=20.4.0"
  },
  "publishConfig": {
    "access": "public"
  }
}
